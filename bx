#!/usr/bin/env php
<?php

$selfName = array_shift($argv);

function show_help()
{
	global $selfName;
exit("
Usage: 
	{$selfName} command [parameters]

Available commands:

c[reate]
	page name [alias] [path] [components..]       # Create a bitrix php page
	tpl name [alias] [description] [components..] # Create a template using components
	ibl name iblock_type [code]                   # Create a iblock
	cmp name [alias] [description]	              # Create a component
	tplcmp template name                          # Create a component's template copy for the site template
	mdl name [alias] [description]	              # Create a module
	menu name iblock

r[emove]
	page name [path]
	tpl name
	ibl id [name] [code]
	cmp name
	cmpin template name
	mdl name

g[enerate]
	codes iblock_id [name] [code]

cl[ear]
	iblock id [name] [code]

l[ist]
	cmp
	mdl
	tpl
	tplcmp template

m[odule]
	install modules
	unintall modules

i[mport]
	products
		magento hostname apiuser apikey category_id iblock_id
		xls filename iblock_id

t[ools]
	pqt # products quantity trace

w[atcher]
	start template
	stop template

backup [email] [ftp://user:pass@hostname]
");
}

function set_php_settings()
{
	ini_set('display_errors', 1);
	ini_set('max_execution_time', 0);
	set_time_limit(0);
	date_default_timezone_set("Europe/Moscow");
}

function bitrix_include_modules($modules=array())
{
	if (is_string($modules))
	{
		$modules = preg_replace("#\s+#", "", $modules);
		$modules = explode(",", $modules);
	}

	foreach ($modules as $module)
	{
		if (!CModule::IncludeModule($module))
			diec("Error", "Module {$module} not found");
	}
}

function bitrix_add_category($iblockID, $parentID=0, $data=array())
{
	$category = new CIBlockSection();
	$files = array();

	if (isset($data["PICTURES_BASE64"]))
	{
		foreach ($data["PICTURES_BASE64"] as $name => $p)
		{
			file_put_contents($_SERVER["DOCUMENT_ROOT"]."/upload/$name", base64_decode($p));
			$files[] = CFile::MakeFileArray("upload/$name");
		}
	}

	$arFields = array
	(
		"ACTIVE"            => "Y",
		"IBLOCK_SECTION_ID" => $parentID,
		"IBLOCK_ID"         => $iblockID,
		"NAME"              => $iblockID."_".mt_rand(10e10,99e10),
		"CODE"				=> "",
		"SORT"              => 1,
		"PICTURE"           => $files,
		"DESCRIPTION"       => "",
		"DESCRIPTION_TYPE"  => "html"
	);

	$arFields = array_merge($arFields, $data);

	if ($id = $category->Add($arFields))
		logc("Add category", "with id {$id}");
	else
		warnc("Warning", $category->LAST_ERROR);

	return $id;
}

function bitrix_add_product($iblockID, $parentID=0, $data=array())
{
	$product = new CIBlockElement();
	$files = array();

	if (isset($data["PICTURES_BASE64"]))
	{
		foreach ($data["PICTURES_BASE64"] as $name => $p)
		{
			//$filename = transliterate("$name");
			file_put_contents($_SERVER["DOCUMENT_ROOT"]."/upload/$name", base64_decode($p));
			$files[] = CFile::MakeFileArray("upload/$name");
		}
	}

	$arFields = array
	(
		"ACTIVE"            => "Y",   
		"IBLOCK_SECTION_ID" => $parentID, 
		"IBLOCK_ID"         => $iblockID,
		"PROPERTY_VALUES"   => array(),
		"NAME"              => $iblockID."_".mt_rand(10e10,99e10),
		"CODE"				=> "",
		"SORT"              => 1,
		"PREVIEW_TEXT"      => "",
		"PREVIEW_TEXT_TYPE" => "html",
		"DETAIL_TEXT"       => "",
		"DETAIL_TEXT_TYPE"  => "html",
		"DETAIL_PICTURE"    => $files
	);

	$arFields = array_merge($arFields, $data);

	if ($id = $product->Add($arFields))
		logc("Add product", "with id {$id}");
	else
		warnc("Warning", $product->LAST_ERROR);

	return $id;
}						

function transliterate($text, $lowercase=true) 
{
	static $smap, $chars, $regex, $maps;

	if (!isset($maps))
	{
		$maps = array (
			'latin_map' => array (
				'À' => 'A', 'Á' => 'A', 'Â' => 'A', 'Ã' => 'A', 'Ä' => 'A', 'Å' => 'A', 'Æ' => 'AE', 'Ç' =>
				'C', 'È' => 'E', 'É' => 'E', 'Ê' => 'E', 'Ë' => 'E', 'Ì' => 'I', 'Í' => 'I', 'Î' => 'I',
				'Ï' => 'I', 'Ð' => 'D', 'Ñ' => 'N', 'Ò' => 'O', 'Ó' => 'O', 'Ô' => 'O', 'Õ' => 'O', 'Ö' =>
				'O', 'Ő' => 'O', 'Ø' => 'O', 'Ù' => 'U', 'Ú' => 'U', 'Û' => 'U', 'Ü' => 'U', 'Ű' => 'U',
				'Ý' => 'Y', 'Þ' => 'TH', 'ß' => 'ss', 'à' => 'a', 'á' => 'a', 'â' => 'a', 'ã' => 'a', 'ä' =>
				'a', 'å' => 'a', 'æ' => 'ae', 'ç' => 'c', 'è' => 'e', 'é' => 'e', 'ê' => 'e', 'ë' => 'e',
				'ì' => 'i', 'í' => 'i', 'î' => 'i', 'ï' => 'i', 'ð' => 'd', 'ñ' => 'n', 'ò' => 'o', 'ó' =>
				'o', 'ô' => 'o', 'õ' => 'o', 'ö' => 'o', 'ő' => 'o', 'ø' => 'o', 'ù' => 'u', 'ú' => 'u',
				'û' => 'u', 'ü' => 'u', 'ű' => 'u', 'ý' => 'y', 'þ' => 'th', 'ÿ' => 'y'
			),
			'latin_symbols_map' => array (
				'©' => '(c)'
			),
			'greek_map' => array (
				'α' => 'a', 'β' => 'b', 'γ' => 'g', 'δ' => 'd', 'ε' => 'e', 'ζ' => 'z', 'η' => 'h', 'θ' => '8',
				'ι' => 'i', 'κ' => 'k', 'λ' => 'l', 'μ' => 'm', 'ν' => 'n', 'ξ' => '3', 'ο' => 'o', 'π' => 'p',
				'ρ' => 'r', 'σ' => 's', 'τ' => 't', 'υ' => 'y', 'φ' => 'f', 'χ' => 'x', 'ψ' => 'ps', 'ω' => 'w',
				'ά' => 'a', 'έ' => 'e', 'ί' => 'i', 'ό' => 'o', 'ύ' => 'y', 'ή' => 'h', 'ώ' => 'w', 'ς' => 's',
				'ϊ' => 'i', 'ΰ' => 'y', 'ϋ' => 'y', 'ΐ' => 'i',
				'Α' => 'A', 'Β' => 'B', 'Γ' => 'G', 'Δ' => 'D', 'Ε' => 'E', 'Ζ' => 'Z', 'Η' => 'H', 'Θ' => '8',
				'Ι' => 'I', 'Κ' => 'K', 'Λ' => 'L', 'Μ' => 'M', 'Ν' => 'N', 'Ξ' => '3', 'Ο' => 'O', 'Π' => 'P',
				'Ρ' => 'R', 'Σ' => 'S', 'Τ' => 'T', 'Υ' => 'Y', 'Φ' => 'F', 'Χ' => 'X', 'Ψ' => 'PS', 'Ω' => 'W',
				'Ά' => 'A', 'Έ' => 'E', 'Ί' => 'I', 'Ό' => 'O', 'Ύ' => 'Y', 'Ή' => 'H', 'Ώ' => 'W', 'Ϊ' => 'I',
				'Ϋ' => 'Y'
			),
			'turkish_map' => array (
				'ş' => 's', 'Ş' => 'S', 'ı' => 'i', 'İ' => 'I', 'ç' => 'c', 'Ç' => 'C', 'ü' => 'u', 'Ü' => 'U',
				'ö' => 'o', 'Ö' => 'O', 'ğ' => 'g', 'Ğ' => 'G'
			),
			'russian_map' => array (
				'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh',
				'з' => 'z', 'и' => 'i', 'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o',
				'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c',
				'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sh', 'ъ' => '', 'ы' => 'y', 'ь' => '', 'э' => 'e', 'ю' => 'yu',
				'я' => 'ya',
				'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E', 'Ё' => 'Yo', 'Ж' => 'Zh',
				'З' => 'Z', 'И' => 'I', 'Й' => 'J', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O',
				'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'H', 'Ц' => 'C',
				'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Sh', 'Ъ' => '', 'Ы' => 'Y', 'Ь' => '', 'Э' => 'E', 'Ю' => 'Yu',
				'Я' => 'Ya'
			),
			'ukrainian_map' => array (
				'Є' => 'Ye', 'І' => 'I', 'Ї' => 'Yi', 'Ґ' => 'G', 'є' => 'ye', 'і' => 'i', 'ї' => 'yi', 'ґ' => 'g'
			),
			'czech_map' => array (
				'č' => 'c', 'ď' => 'd', 'ě' => 'e', 'ň' => 'n', 'ř' => 'r', 'š' => 's', 'ť' => 't', 'ů' => 'u',
				'ž' => 'z', 'Č' => 'C', 'Ď' => 'D', 'Ě' => 'E', 'Ň' => 'N', 'Ř' => 'R', 'Š' => 'S', 'Ť' => 'T',
				'Ů' => 'U', 'Ž' => 'Z'
			),
			'polish_map' => array (
				'ą' => 'a', 'ć' => 'c', 'ę' => 'e', 'ł' => 'l', 'ń' => 'n', 'ó' => 'o', 'ś' => 's', 'ź' => 'z',
				'ż' => 'z', 'Ą' => 'A', 'Ć' => 'C', 'Ę' => 'e', 'Ł' => 'L', 'Ń' => 'N', 'Ó' => 'O', 'Ś' => 'S',
				'Ź' => 'Z', 'Ż' => 'Z'
			),
			'latvian_map' => array (
				'ā' => 'a', 'č' => 'c', 'ē' => 'e', 'ģ' => 'g', 'ī' => 'i', 'ķ' => 'k', 'ļ' => 'l', 'ņ' => 'n',
				'š' => 's', 'ū' => 'u', 'ž' => 'z', 'Ā' => 'A', 'Č' => 'C', 'Ē' => 'E', 'Ģ' => 'G', 'Ī' => 'i',
				'Ķ' => 'k', 'Ļ' => 'L', 'Ņ' => 'N', 'Š' => 'S', 'Ū' => 'u', 'Ž' => 'Z'
			),
			'special_chars' => array (
				' ' => '_', '+' => '', '"' => '', '\'' => '', ':' => '', ';' => '', '\\' => '', '|' => '', 
				'/' => '', ',' => '', '.' => '', '-' => '_'
			)
		);

		foreach ($maps as $map) 
		{
			foreach ($map as $orig => $conv) 
			{
				$smap[$orig] = $conv;
				$chars .= $orig;
			}
		}
	}

	for ($i = 0; $i < mb_strlen($chars); $i++) 
	{
		$char = mb_substr($chars, $i, 1, 'UTF-8');
		$text = str_replace($char, @$smap[$char], $text);
	}

	if ($lowercase)
	{
		$text = strtolower($text);
	}

	return $text;
}

function getarg($default=null)
{
	global $argv;

	if (!isset($argv[0]))
	{
		if (is_null($default)) 
			show_help();
		else
			return $default;
	}

	$result = array_shift($argv);

	if ($result=="-") 
	{
		return $default;
	}

	return $result;
}

function diec($action, $comment)
{
	die("\033[1;31m{$action}\033[0m {$comment}\n");
}

function logc($action, $comment)
{
	echo("\033[1;32m{$action}\033[0m {$comment}\n");
	flush();
}

function warnc($action, $comment)
{
	echo("\033[1;33m{$action}\033[0m {$comment}\n");
	flush();
}

function get($url, $path)
{
	logc("Download", "getting '$url'");
	if (is_file($path))
		unlink($path);

	if ($rf = fopen($url, "rb")) 
	{
		$lf = fopen($path, "wb");

		if ($lf)
		{
			while (!feof($rf)) 
				fwrite($lf, fread($rf, 1024 * 8 ), 1024 * 8 );
			fclose($lf);
		}

		fclose($rf);
	}
}

function putf($file, $data)
{
	if (@file_put_contents($file, $data)) 
		logc("Create file", $file);
}

function mkd($path)
{
	if (@mkdir($path, 0755)) 
		logc("Create directory", $path);
}

function rm_rf($dir)
{
    foreach (glob($dir.'/*') as $file) 
    {
        if (is_dir($file))
            rm_rf($file);
        else if (@unlink($file)) 
        	logc("Remove file",$file);
    }
    if (@rmdir($dir)) logc("Remove directory", $dir);
}

function cp_r($source, $destination, $rewrite=false)
{
	if (is_file($destination) && $rewrite)
		@unlink($destination);

	$dest = $destination."/".basename($source);

	if (is_dir($source))
	{
		mkd($dest);
		foreach (glob($source.'/*') as $file)
			cp_r($file, $dest); 
	}
	else
		if (is_file($source))
			cp($source, $dest);
}

function cp($source, $destination)
{
	if (@copy($source, $destination)) 
		logc("Copy", "from {$source} to {$destination}");
}

function get_components($arr)
{
	$result = "";
	foreach ($arr as $component)
	{
$COMPANENT_TPL = <<<EOF
<?php \$APPLICATION->IncludeComponent(
	"{$component}", 
	".default", 
	array
	(
	
	),
	false
);?>
EOF;
		$result .= $COMPANENT_TPL;
	}
	return $result;
}


$_SERVER["DOCUMENT_ROOT"] = dirname(__FILE__);
$_SERVER["SCRIPT_NAME"]   = "/bx";
$_SERVER["REQUEST_URI"]   = "/bx";
$_SERVER["DOCUMENT_URI"]  = "/bx";
$_SERVER["SCRIPT_URL"]    = "/bx";
$_SERVER["SCRIPT_URI"]    = "/bx";
$DOCUMENT_ROOT            = $_SERVER["DOCUMENT_ROOT"];
$BITRIX_DIR               = "{$DOCUMENT_ROOT}/bitrix";

define("BITRIX_PROLOG", $DOCUMENT_ROOT."/bitrix/modules/main/include/prolog_before.php");

define("LANG", "ru"); 
define("STOP_STATISTICS", true);
define("NO_KEEP_STATISTIC", true);
define("NOT_CHECK_PERMISSIONS", true);

set_php_settings();

if (!is_file(BITRIX_PROLOG))
	diec("Bitrix not found", BITRIX_PROLOG);

$command = getarg();

switch ($command)
{
	case "c":
	case "create":
		$param = getarg();

		switch ($param)
		{
			case "page":
				$name       = getarg();
				$alias      = getarg(transliterate($name));
				$path       = getarg("./");
				$components = get_components($argv);
				$path       = rtrim($path, "/")."/$alias";
$PAGE_TPL = <<<EOF
<?php require(\$_SERVER["DOCUMENT_ROOT"]."/bitrix/header.php"); \$APPLICATION->SetTitle("{$name}"); ?>
{$components}
<?php require(\$_SERVER["DOCUMENT_ROOT"]."/bitrix/footer.php"); ?>
EOF;
$SECTION_TPL = <<<EOF
<?php \$sSectionName = "{$name}"; \$arDirProperties = array( ); ?>
EOF;
				mkd($path);
				putf("$path/index.php", $PAGE_TPL);
				putf("$path/.section.php", $SECTION_TPL);
			break;	

			case "tpl":
			case "template":
				$name        = getarg();
				$alias       = getarg(transliterate($name));
				$description = getarg("");
				$components  = get_components($argv);
				$path  = "./bitrix/templates/$alias";
$STYLES_TPL = <<<EOF
<?php \$arStyles = array( ); return \$arStyles; ?>
EOF;
$DESCRIPTION_TPL = <<<EOF
<?php \$arTemplate = Array("NAME"=>"{$name}", "DESCRIPTION"=>"{$description}");?>
EOF;
$HEADER_TPL = <<<EOF
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="utf-8" />
		<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">

		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
		<?php \$APPLICATION->ShowHead();?>
		<meta name="viewport" content="width=1024; initial-scale=1.0" />

		<title><?php \$APPLICATION->ShowTitle()?></title>

		<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />

		<!--[if lt IE 9]>
			<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		<![endif]-->
	</head>

	<body>
		<div id="panel"><?php \$APPLICATION->ShowPanel();?></div>

		<header>
		</header>
		<section>
EOF;
$FOOTER_TPL = <<<EOF
		</section>
		<footer>
		</footer>
	</body>
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
	<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js"></script>
	<script src="<?=SITE_TEMPLATE_PATH?>/js/core.js"></script>
</html>
EOF;
$STYLES_TPL = <<<EOF
EOF;
$TEMPLATE_STYLES_TPL = <<<EOF
@import url("css/core.css");
EOF;
$CORE_SCSS_TPL = <<<EOF
@charset "UTF-8";

header {

}

section {

}

footer {

}
EOF;
$CORE_COFFEE_TPL = <<<EOF
(($) ->
	$(document)
		.ready ()->

)(jQuery)
EOF;
				mkd($path);
				mkd("$path/coffee");
				mkd("$path/js");
				mkd("$path/scss");
				mkd("$path/css");
				mkd("$path/images");
				putf("$path/.styles.php", $STYLES_TPL);
				putf("$path/description.php", $DESCRIPTION_TPL);
				putf("$path/header.php", $HEADER_TPL);
				putf("$path/footer.php", $FOOTER_TPL);
				putf("$path/styles.css", $STYLES_TPL);
				putf("$path/template_styles.css", $TEMPLATE_STYLES_TPL);
				putf("$path/scss/core.scss", $CORE_SCSS_TPL);
				putf("$path/coffee/core.coffee", $CORE_COFFEE_TPL);
			break;

			case "ibl":
			case "iblock":
				$name        = getarg();
				$type        = getarg();
				$code        = getarg(transliterate($name));
				$site_id     = getarg("s1");
				$description = getarg("");
				$active      = getarg("Y");
				$sort        = getarg("1");

				require_once(BITRIX_PROLOG);
				set_php_settings();
				bitrix_include_modules("iblock");

				$iblock = new CIBlock();
				$id = $iblock->Add
				(array(
					"ACTIVE"           => $active,
					"NAME"             => $name,
					"CODE"             => $code,
					"LIST_PAGE_URL"    => "#SITE_DIR#/$type/index.php?ID=#IBLOCK_ID#",
					"DETAIL_PAGE_URL"  => "#SITE_DIR#/$type/detail.php?ID=#ID#",
					"SECTION_PAGE_URL" => "#SITE_DIR#/$type/list.php?SECTION_ID=#ID#",
					"IBLOCK_TYPE_ID"   => $type,
					"SITE_ID"          => array($site_id),
					"SORT"             => $sort,
					"PICTURE"          => array(),
					"DESCRIPTION"      => $description,
					"DESCRIPTION_TYPE" => "text",
					"GROUP_ID"         => array("2"=>"R")		
				));
				if ($id) logc("Create iblock", "with id $id");
			break;

			case "menu":

$MENU_TPL = <<<EOF
<?php if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) die();

\$aMenuLinksExt = \$APPLICATION->IncludeComponent("bitrix:menu.sections", "", array(
	"IS_SEF"      => "N",
	"ID"          => \$_REQUEST["ID"],
	"IBLOCK_TYPE" => "publications",
	"IBLOCK_ID"   => "7",
	"SECTION_URL" => "#SITE_DIR#publications/articles/",
	"DEPTH_LEVEL" => "1"
));

\$count = count(\$aMenuLinksExt);
for (\$i = 0; \$i < \$count; \$i++):
	\$j = \$count-\$i-1;
	\$aMenuLinksNew[\$i][0] = \$aMenuLinksExt[\$i][0];
	\$aMenuLinksNew[\$i][1] = \$aMenuLinksExt[\$i][1].\$aMenuLinksExt[\$i][0]."/";
	\$aMenuLinksNew[\$i][2] = array(\$aMenuLinksNew[\$i][1]."index.php");
	\$aMenuLinksNew[\$i][3] = array
	(
		"ARTICLES" => "Y"
	);
	\$aMenuLinksNew[\$i][4] = "";
endfor;

\$aMenuLinks = array_merge(\$aMenuLinks, \$aMenuLinksNew);	
EOF;
			break;

			case "tplcmp":
				$tplname = getarg();
				$name    = strtolower(getarg());

				$acDir    = "{$BITRIX_DIR}/components/additional/{$name}/templates/.default";
				$bcDir    = "{$BITRIX_DIR}/components/bitrix/{$name}/templates/.default";
				$acTplDir = "{$BITRIX_DIR}/templates/{$tplname}/components/additional/{$name}";
				$bcTplDir = "{$BITRIX_DIR}/templates/{$tplname}/components/bitrix/{$name}";

				if (is_dir($acDir))
				{
					cp_r($acDir, $acTplDir, true);
				}

				if (is_dir($bcDir))
				{
					cp_r($bcDir, $bcTplDir, true);
				}
			break;
		}
	break;

	case "r":
	case "remove":
		$param = getarg();

		switch ($param)
		{
			case "page":
				$name  = getarg();
				$path  = getarg("./");
				$path1 = rtrim($path, "/")."/".transliterate($name);				
				$path2 = rtrim($path, "/")."/".$name;	
				rm_rf($path1);
				rm_rf($path2);
			break;

			case "tpl":
			case "template":
				$name  = getarg();
				$alias = transliterate($name);
				$path  = "./bitrix/templates/$alias";
				rm_rf($path);
			break;

			case "ibl":
			case "iblock":
				$filter = array();
				if ($v = getarg(false)) $filter["ID"]   = $v;
				if ($v = getarg(false)) $filter["NAME"] = $v;
				if ($v = getarg(false)) $filter["CODE"] = $v;

				require_once(BITRIX_PROLOG);
				set_php_settings();
				bitrix_include_modules("iblock");

				$iblocks = CIBlock::GetList
				(
					array("SORT"=>"ASC"),
 					$filter,
 					false
				);

				while ($iblock = $iblocks->Fetch())
				{
					$id = $iblock["ID"];
					$DB->StartTransaction();
					if (!CIBlock::Delete($id))
					{
						$DB->Rollback();
						diec("Error", "Can't remove iblock");
					}
					else
					{
						$DB->Commit();
						logc("Remove iblock", "with id $id");
					}
				}
			break;
		}
	break;

	case "g":
	case "generate":
		$param = getarg();

		switch ($param)
		{
			case "codes":
				$filter = array();
				if ($v = getarg(false)) $filter["ID"]   = $v;
				if ($v = getarg(false)) $filter["NAME"] = $v;
				if ($v = getarg(false)) $filter["CODE"] = $v;

				require_once(BITRIX_PROLOG);
				set_php_settings();
				bitrix_include_modules("iblock");

				$iblocks = CIBlock::GetList
				(
					array("SORT"=>"ASC"),
					$filter,
					false
				);

				while ($iblock = $iblocks->Fetch())
				{
					$rsItems = CIBlockSection::GetList
					(
						array(), 
						array('IBLOCK_ID'=>$iblock["ID"])
					);

					while ($arItem = $rsItems->Fetch())
					{
						$ibsection = new CIBlockSection();
						$code = transliterate($arItem["NAME"]);
						$arFields = array
						(
							"CODE" => $code
						);

						if ($ibsection->Update($arItem['ID'], $arFields))
							logc("Update iblock section", "id {$arItem['ID']} code {$code}");
					}

					$rsItems = CIBlockElement::GetList
					(
						array(),
						array('IBLOCK_ID'=>$iblock["ID"])
					);

					while ($arItem = $rsItems->Fetch())
					{
						$ibelement = new CIBlockElement();
						$code = transliterate($arItem["NAME"]);
						$arFields = array
						(
							"CODE" => $code
						);

						if ($ibelement->Update($arItem['ID'], $arFields))
							logc("Update iblock element", "id {$arItem['ID']} code {$code}");
					}
				}
				
			break;
		}
	break;

	case "cl":
	case "clear":
		$param = getarg();

		switch ($param)
		{
			case "ibl":
			case "iblock":
				$filter = array();
				if ($v = getarg(false)) $filter["ID"]   = $v;
				if ($v = getarg(false)) $filter["NAME"] = $v;
				if ($v = getarg(false)) $filter["CODE"] = $v;

				require_once(BITRIX_PROLOG);
				set_php_settings();
				bitrix_include_modules("iblock");

				$iblocks = CIBlock::GetList
				(
					array("SORT"=>"ASC"),
 					$filter,
 					false
				);

				while ($iblock = $iblocks->Fetch())
				{
					warnc("Clear iblock", "with id {$iblock['ID']}");

					$rsItems = CIBlockSection::GetList
					(
						array(), 
						array('IBLOCK_ID'=>$iblock["ID"])
					);

					while ($arItem = $rsItems->Fetch())
					{
						if (CIBlockSection::Delete($arItem['ID']))
							logc("Remove iblock section", "with id {$arItem['ID']}");
					}

					$rsItems = CIBlockElement::GetList
					(
						array(), 
						array('IBLOCK_ID'=>$iblock["ID"])
					);

					while ($arItem = $rsItems->Fetch())
					{
						if (CIBlockElement::Delete($arItem['ID']))
							logc("Remove iblock element", "with id {$arItem['ID']}");
					}
				}
			break;
		}
	break;

	case "l":
	case "list":
		$param = getarg();

		switch ($param)
		{
			case "tpl":
			case "templates":
				require_once(BITRIX_PROLOG);
				set_php_settings();

				foreach (glob("{$BITRIX_DIR}/templates/*") as $template)
				{
					$description = "{$template}/description.php";
					if (is_file($description))
					{
						include($description);
						printf("%30s %30s %-150s\n", basename($template), $arTemplate["NAME"], $arTemplate["DESCRIPTION"]);
					}
				}
			break;

			case "mdl":
			case "modules":
				require_once(BITRIX_PROLOG);
				set_php_settings();
					
				function getSubclasses($parentClassName)
				{
					$classes = array();
					foreach (get_declared_classes() as $className)
					{
						if (is_subclass_of($className, $parentClassName))
							$classes[] = $className;
					}

					return $classes;
				}

				foreach (glob("{$BITRIX_DIR}/modules/*") as $module)
				{
					$install = "{$module}/install/index.php";
					if (is_file($install))
					{
						include($install);
					}
				}

				foreach (getSubclasses("CModule") as $class)
				{
					$module = new $class();
					printf("%30s  %8s  %30s  %-150s\n", $class, $module->MODULE_VERSION, $module->MODULE_NAME, $module->MODULE_DESCRIPTION);
				}
			break;

			case "cmp":
			case "components":
				require_once(BITRIX_PROLOG);
				set_php_settings();

				define("B_PROLOG_INCLUDED", true);

				echo "Additional:\n";
				foreach (glob("{$BITRIX_DIR}/components/additional/*") as $component)
				{
					$description      = "{$component}/.description.php";
					$lang_description = "{$component}/lang/en/.description.php";
					if (is_file($description))
					{
						include($lang_description);
						include($description);
						printf("%40s  %50s  %-80s\n", basename($component), $arComponentDescription["NAME"], $arComponentDescription["DESCRIPTION"]);
					}
				}

				echo "Bitrix:\n";
				foreach (glob("{$BITRIX_DIR}/components/bitrix/*") as $component)
				{
					$description      = "{$component}/.description.php";
					$lang_description = "{$component}/lang/en/.description.php";
					if (is_file($description))
					{
						include($lang_description);
						include($description);
						printf("%40s  %50s  %-80s\n", basename($component), $arComponentDescription["NAME"], $arComponentDescription["DESCRIPTION"]);
					}
				}

			break;

			case "tplcmp":
				$tplname = getarg();

				$acTplDir = "{$BITRIX_DIR}/templates/{$tplname}/components/additional/*";
				$bcTplDir = "{$BITRIX_DIR}/templates/{$tplname}/components/bitrix/*";

				foreach (glob($acTplDir) as $template)
				{
					printf("%40s\n", basename($template));
					foreach (glob("$template/*") as $name)
					{
						printf("%80s\n", basename($name));
					}
				}				

				foreach (glob($bcTplDir) as $template)
				{
					printf("%40s\n", basename($template));
					foreach (glob("$template/*") as $name)
					{
						printf("%39s├─ %-40s\n", "", basename($name));
					}
				}				
			break;
		}
	break;

	case "i":
	case "import":
		$param = getarg();

		switch ($param)
		{
			case "products":
				$param = getarg();

				switch ($param)
				{
					case "magento":
						$host       = getarg();
						$apiuser    = getarg();
						$apikey     = getarg();
						$categoryID = getarg();
						$iblockID   = getarg();

						require_once(BITRIX_PROLOG);
						set_php_settings();
						bitrix_include_modules("iblock,catalog");

						$proxy = new SoapClient("http://{$host}/api/v2_soap/?wsdl");
						$proxy->startSession(); 
						$session = $proxy->login($apiuser, $apikey);
						$category = $proxy->catalogCategoryTree($session, $categoryID);

						function import_category($proxy, $session, $iblockID, $parentID, $category)
						{
							foreach ($category->children as $item)
							{
								$data = array
								(
									"NAME"        => $item->name,
									"CODE"        => $item->url_key,
									"DESCRIPTION" => $item->description
								);

								$cid = bitrix_add_category($iblockID, $parentID, $data);

								if (count($item->children))
									import_category($proxy, $iblockID, $cid, $item);

								$products = $proxy->catalogProductList($session);/*, array('complex_filter' => array(
									array
									(
										'key'   => 'categories',
										'value' => array('key' => 'eq', 'value' => $cid)
									)
								)));*/

								foreach ($products as $item)
								{
									try
									{
										$product = $proxy->catalogProductInfo($session, $item->id);
										$entity  = $proxy->catalogProductTierPriceEntity($session, $item->id);

										$data = array
										(
											"NAME"        => $product->name,
											"CODE"        => $product->url_key,
											"DESCRIPTION" => $product->description
										);

										$pid = bitrix_add_product($iblockID, $cid, $data);

										CPrice::SetBasePrice($pid, $product->price, "RUB"); #TODO: Add currency import
										CCatalogProduct::Add(array("ID" => $pid, "QUANTITY" => $entity->qty)); #TODO: Add all prices import
									}
									catch (Exception $e)
									{
										warnc("Warning", $e->getMessage());
									}
								}
							}
						}

						import_category($proxy, $session, $iblockID, 0, $category);

						$proxy->endSession($session);
					break;

					case "xls":
						
					break;
				}
			break;
		}
	break;

	case "t":
	case "tools":
		$param = getarg();

		switch ($param)
		{
			case "pqt":
				require_once(BITRIX_PROLOG);			
				set_php_settings();

				$result = $DB->Query("UPDATE `b_catalog_product` SET QUANTITY_TRACE = 'Y'"); 

				if ($result)
					logc("Update products", "OK");
				else
					diec("Update products", "Error");
			break;
		}
	break;

	case "w":
	case "watcher":
		$param = getarg();

		switch ($param)
		{
			case "start":
				$template = getarg();
				shell_exec("cd {$BITRIX_DIR}/templates/{$template}/ && watcher start");
			break;

			case "stop":
				$template = getarg();
				shell_exec("cd {$BITRIX_DIR}/templates/{$template}/ && watcher stop");
			break;
		}
	break;

	case "backup":
		$options = array();
		if ($v = getarg(false)) $options["email"] = $v;
		if ($v = getarg(false)) $options["ftp"] = $v;

		require_once(BITRIX_PROLOG);
		set_php_settings();
		bitrix_include_modules("iblock,catalog");

		require_once("{$BITRIX_DIR}/modules/main/classes/general/tar_gz.php");

		$tmpPath = "$DOCUMENT_ROOT/tmp";
		$tmpUrl  = "/tmp";

		if (!is_dir($tmpPath))
			mkd($tmpPath);

		$charset = defined('BX_UTF') && BX_UTF ? 'utf8' : 'cp1251';
		$date    = date("d-m-Y");
		$arcfile = "{$tmpPath}/{$date}.tar.gz";
		$arcurl  = "{$tmpUrl}/{$date}.tar.gz";
		$dbfile  = "{$tmpPath}/db_{$date}.sql";

		function arch_path($arch, $path)
		{
			$path = rtrim($path, "/");

			if (preg_match("#^{$DOCUMENT_ROOT}(/bitrix/([^/]*cache|backup)|/tmp)#", $path))
				return;

			//$arch->add($path, '', $DOCUMENT_ROOT);
			logc("Add to archive", $path);

			if (is_dir($path))
			{
				foreach (glob($path."/*") as $file)
				{
					arch_path($arch, $file);
				}
			}
		}

		$arch = new CArchiver($arcfile, true);
		shell_exec("mysqldump -h{$DBHost} -u{$DBLogin} -p{$DBPassword} --default-character-set={$charset} {$DBName} > {$dbfile}");
		logc("Make db dump", $dbfile);
		$arch->add($dbfile, '', $DOCUMENT_ROOT);
		logc("Add to archive", $dbfile);
		unlink($dbfile);
		arch_path($arch, $DOCUMENT_ROOT);
		//$arch->close();

		logc("Link", $arcurl);
	break;

	default:
	case "help":
		show_help();
	break;
}

echo "\n";
